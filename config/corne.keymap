/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/glove80.h"


#include "combos.dtsi"  // requires layer aliases
#include "mouse.dtsi"
#include "extra_keys.h"

#define XXX &none
#define ___ &trans

#define QUICK_TAP_MS 175

&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo
MAKE_HRM(hmr_lpar_lt, &kp, &lpar_lt, KEYS_L THUMBS)    // "    "   "   "
MAKE_HRM(hmr_rpar_gt, &kp, &rpar_gt, KEYS_L THUMBS)    // "    "   "   "

#define MT_CORE \
    flavor = "tap-preferred"; \
    tapping-term-ms = <220>; \
    quick-tap-ms = <220>; \
    hold-trigger-key-positions = <0>;

&mt { MT_CORE };
ZMK_HOLD_TAP(mt_home, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_HOLD_TAP(mt_end, bindings = <&masked_end>, <&kp>; MT_CORE)

#define MASK_MODS(NAME, MODS, BINDING) \
    ZMK_MOD_MORPH(NAME, \
        bindings = <BINDING>, <BINDING>; \
        mods = <MODS>; \
    )
MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

ZMK_MOD_MORPH(smart_shft,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)
&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_TAP_DANCE(num_dance,
    tapping-term-ms = <200>;
    bindings = <&num_word>, <&sl NUM>;  // reverse this for sticky-num on single tap
)
&num_word {  // num-word, requires PR #1451
    layers = <NUM>;
    continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
};


/ {
    behaviors {
        croc: croc {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LT>, <&kp GT>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        slash: slash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp NON_US_BACKSLASH>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lines: underscore_pipe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp UNDER>, <&kp PIPE2>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        fancyl: minus_tilde {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp PIPE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        equlpls: equal_plus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp PLUS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        prcntastk: percent_asterisk {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PRCNT>, <&kp ASTRK>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        qusthat: question_caret {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp CARET>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        backs: back_del {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BKSP>, <&kp DEL>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        esctb: esc_tab {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp TAB>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        uppies: shift_caps {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&kp CAPS>;

            mods = <(MOD_LCTL)>;
        };

        money: pound_dollar {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp POUND>, <&kp DOLLAR>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        atmps: at_amps {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DQT>, <&kp AMPS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        exchsh: exclamation_hash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp EXCL>, <&kp BSLH>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        coppy: tap_dance_copy_paste {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LC(C)>, <&kp LC(V)>;
        };

        qur: tap_dance_q_undo_redo {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp Q>, <&kp LC(Z)>, <&kp LC(Y)>;
        };

    };

    keymap {
        compatible = "zmk,keymap";
ZMK_CONDITIONAL_LAYER(FN NUM, SYS)

        default_layer {
            // -----------------------------------------------------------------------------------------
            // | N/A | LWR |esctb|  P  |  Y  |  F  |      |  G  |  C  |  R  |  L  | RSE | N/A |
            // | N/A |  A  |  O  |  E  |  U  |  I  |      |  D  |  H  |  T  |  N  |  S  | N/A |
            // | N/A |coppy|  Q  |  J  |  K  |  X  |      |  B  |  M  |  W  |  V  |  Z  | N/A |
            //                   | ENT | .(') |SPACE |  |BK(DE)| ,(") |  ⬆  |

            bindings = <
&none  &tog 2  &esctb  &kp P      &kp Y     &kp F                    &kp G   &kp C    &kp R    &kp L  &tog 1  &none
&none  &kp A   &kp O   &kp E      &kp U     &kp I                    &kp D   &kp H    &kp T    &kp N  &kp S   &none
&none  &coppy  &qur    &kp J      &kp K     &kp X                    &kp B   &kp M    &kp W    &kp V  &kp Z   &none
                       &kp RET  &mt SINGILE_QUOTE DOT &kp SPACE              &backs  &mt COMMA AT   &kp LSHIFT
            >;
        };

        lower_layer {
            // ---------------------https://github.com/FlaviaRas/zmk-configold/issues--------------------------------------------------------------------
            // | N/A | LWR | -(~)| £($)| @(&)| !(#)|      |  1  |  2  |  3  | =(+)| RSE | N/A |
            // | N/A | /(\)| <(>)| %(*)| :(;)| ?(^)|      |  4  |  5  |  6  |     |     | N/A |
            // | N/A |coppy| _(|)| {(})| [(])| (())|      |  7  |  8  |  9  |     |     | N/A |
            //                   | ENT | .(') |SPACE |  |BK(DE)| ,(") |  ⬆  |

            bindings = <
&trans  &trans  &fancyl   &money        &atmps          &exchsh                &kp N1  &kp N2                         &kp N3  &equlpls    &trans  &trans
&trans  &slash  &croc    &prcntastk     &mt SEMI COLON  &qusthat               &kp N4  &kp N5                         &kp N6  &trans  &trans   &trans
&trans  &trans  &lines   &mt RBRC LBRC  &mt RBKT LBKT   &mt RPAR LPAR          &kp N7  &kp N8                         &kp N9  &trans      &trans &trans
                                          &trans    &trans     &trans      &trans  &mt COMMA N0  &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // | N/A | LWR |     |  ⬆  |     |     |      |  V+ |  V- |  Vx |PSCN | RSE | N/A |
            // | N/A |     |  ⬅ |  ⬇  |  ⮕ |     |      | home |     |    |  B+ |  B- | N/A |
            // | N/A |     |     |     |     |     |      |     |     |     |     |     | N/A |
            //                   | ENT | .(') |SPACE |  |BK(DE)| ,(") |  ⬆  |

            bindings = <
&trans  &trans  &trans    &kp UP    &trans     &trans    &kp C_VOL_UP  &kp C_VOL_DN  &kp C_MUTE  &kp PSCRN     &trans        &trans
&trans  &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans    &kp RWIN      &trans        &trans      &kp C_BRI_UP  &kp C_BRI_DN  &trans
&trans  &trans  &trans    &trans    &trans     &trans    &trans        &trans        &trans      &kp C_SLEEP       &trans        &trans
                          &trans    &trans     &trans    &trans        &trans &trans  
            >;
        };
    };
};
