/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | N/A | ,(')| .(")|  P  |  Y  |  F  |      |  G  |  C  |  R  |  L  | DEL | N/A |
// | N/A |  A  |  O  |  E  |  U  |  I  |      |  D  |  H  |  T  |  N  |  S  | N/A |
// | N/A | SHFT|  Q  |  J  |  K  |  X  |      |  B  |  M  |  W  |  V  |  Z  | N/A |
//                    | CTRL | LWR | SPC |  | BKSP | RSE  | ENT |
                        bindings = <
   &kp A &modmorph(COMM, LSHIFT, SQT) &modmorph(DOT, LSHIFT, DQT) &kp P &kp Y &kp F   &kp G &kp C  &kp R &kp L &kp DEL &kp A
   &kp A &kp A &kp O &kp E &kp U &kp I   &kp D &kp H  &kp T &kp N &kp S &kp A
   &kp A &kp LSHFT &kp Q &kp J &kp K &kp X   &kp B &kp M  &kp W &kp V &kp Z &kp A
                  &kp LCTRL &mo 1 &kp SPACE   &kp BSPC &mo 2 &kp RET
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// | N/A | TAB |     |  &  |  ~  | @(#)|      |  1  |  2  |  3  | +(-)| £($)| N/A |
// | N/A | ESC |  ;  |  :  |  !  |  ?  |      |  4  |  5  |  6  | %(=)| *(^)| N/A |
// | N/A | SHFT| _(|)| {(})| [(])| (())|      |  7  |  8  |  9  | <(>)| /(\)| N/A |
//                    | CTRL | DEF | SPC |  | BKSP | RSE  | 0 |
                        bindings = <
   &kp A &kp TAB &kp A &kp AMPS &kp TILDE &modmorph(AT, LSHIFT, HASH)    &kp N1 &kp N2 &kp N3 &modmorph(PLUS, LSHIFT, MINUS) &modmorph(AAA, LSHIFT, AAA) PRCNT &kp A
   &kp A &kp ESC &kp SEMI &kp COLON &kp EXCL &kp QMARK    &kp N4 &kp N5 &kp N6 &modmorph(PRCNT, LSHIFT, EQUAL) &modmorph(ASTRK, LSHIFT, CARET) &kp A
   &kp A &kp LSHFT &modmorph(UNDER, LSHIFT, PIPE) &modmorph(LBRC, LSHIFT, RBRC) &modmorph(LBKT, LSHIFT, RBKT) &modmorph(LPAR, LSHIFT, RPAR)    &kp N7 &kp N8 &kp N9 &modmorph(LT, LSHIFT, GT) &modmorph(FSLH, LSHIFT, BSLH) &kp A
       &kp LCTRL &mo 1 &kp SPACE   &kp BSPC &mo 2 &kp N0
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// | N/A |     |     |  ⬆  |     |     |      |  V+ |  V- |  Vx |  B+ |  B- | N/A |
// | N/A |     |  ⬅ |  ⬇  |  ⮕ |     |      |  S⬆ |  S⬇ | FIND| PSCN|     | N/A |
// | N/A |     |     |     |     |     |      |     |     |     |     |     | N/A |
//                    | CTRL | LWR | SPC |  | BKSP | DEF | ENT |
                        bindings = <
   &kp A &kp A &kp A &kp UP &kp A &kp A    &kp K_VOL_UP &kp K_VOL_DN &kp K_MUTE &kp C_BRI_UP &kp C_BRI_DN &kp A
   &kp A &kp A &kp RIGHT &kp DOWN &kp LEFT &kp A   &kp K_SCROLL_UP &kp K_SCROLL_DOWN A &kp K_FIND &kp PSCN &kp A &kp A
   &kp A &kp A &kp A &kp A &kp A &kp A    &kp N7 &kp N8 &kp N9 &kp EQUAL &kp LT &kp A
          &kp LCTRL &mo 1 &kp SPACE   &kp BSPC &mo 2 &kp RET
                        >;
                };
        };
};
