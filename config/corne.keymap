/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    behaviors {
        croc: croc {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LT>, <&kp GT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            };

        slash: slash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp NON_US_BACKSLASH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            };

        commqt: comma_quotation {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp AT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            };

        dotapos: dot_apostrophe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SINGLE_QUOTE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            };

        lines: underscore_pipe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp UNDER>, <&kp PIPE2>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            };

        fancyl: minus_tilde {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp PIPE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            }; 

        brace: brace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LBRC>, <&kp RBRC>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            };

        square: square_braket {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp RBKT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            };

        brackets: brackets {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp RPAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            };

        equlpls: equal_plus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp PLUS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            };  

        prcntastk: percent_asterisk {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PRCNT>, <&kp ASTRK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            };

         equalhat: equals_caret {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp CARET>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            };

         backs: back_del {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BKSP>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            };

         esctb: esc_tab {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp TAB>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            };

         uppies: shift_caps {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&kp CAPS>;
            mods = <(MOD_LCTL)>;
            };  
        
         money: pound_dollar {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp POUND>, <&kp DOLLAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            };  

         atmps: at_amps {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp AT>, <&kp AMPS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            }; 

        };


        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | N/A | LWR |esctb|  P  |  Y  |  F  |      |  G  |  C  |  R  |  L  | RSE | N/A |
// | N/A |  A  |  O  |  E  |  U  |  I  |      |  D  |  H  |  T  |  N  |  S  | N/A |
// | N/A |upies|  Q  |  J  |  K  |  X  |      |  B  |  M  |  W  |  V  |  Z  | N/A |
//                    | CTRL | .(') | SPC |  |BK(DE)| ,(") | ENT |
                        bindings = <
   &none &tog 2 &esctb &kp P &kp Y &kp F &kp G &kp C  &kp R &kp L &tog 1 &none
   &none &kp A &kp O &kp E &kp U &kp I &kp D &kp H  &kp T &kp N &kp S &none
   &none &uppies &kp Q &kp J &kp K &kp X &kp B &kp M  &kp W &kp V &kp Z &none
   &kp LCTRL &dotapos &kp SPACE &backs &commqt &kp RET
 
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// | N/A | LWR | -(~)| £($)|  @&  |  @  |       |  1  |  2  |  3  | =(+)| RSE | N/A |
// | N/A |     |  ;  |  :  |  !  |  ?  |      |  4  |  5  |  6  | %(*)| <(>)| N/A |
// | N/A |upies| _(|)| {(})| [(])| (())|      |  7  |  8  |  9  | (^)| /(\)| N/A |
//                    | CTRL | LWR | SPC |  |BK(DE)|  0  | ENT |
                        bindings = <
   &trans &trans &fancyl &money &atmps &trans &kp N1 &kp N2 &kp N3 &equlpls &trans &trans
   &trans &kp HASH &kp SEMI &kp COLON &kp EXCL &kp QMARK &kp N4 &kp N5 &kp N6 &prcntastk &croc &trans
   &trans &uppies &lines &brace &square &brackets &kp N7 &kp N8 &kp N9 &equalhat &slash  &trans
   &trans &trans &trans &trans &kp N0 &trans
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// | N/A | LWR |     |  ⬆  |     |     |      |  V+ |  V- |  Vx |PSCN | RSE |
// | N/A |     |  ⬅ |  ⬇  |  ⮕ |     |      | home |     |    |  B+ |  B- | N/A |
// | N/A |LC(C)|LC(V)|LC(Z)|LC(Y)|     |      |     |     |     |     |     | N/A |
//                    | CTRL | LWR | SPC |  |BK(DE)| RSE | ENT |
                        bindings = <
   &trans &trans &trans &kp UP  &trans &trans   &kp C_VOL_UP &kp C_VOL_DN &kp C_MUTE &kp PSCRN &trans &trans
   &trans &trans &kp LEFT &kp DOWN &kp RIGHT &trans  &kp RWIN &trans &trans &kp C_BRI_UP &kp C_BRI_DN &trans
   &trans &kp LC(C) &kp LC(V) &kp LC(Z) &kp LC(Y) &trans   &trans &trans &trans &trans &trans &trans 
   &trans &trans &trans &trans &trans &trans
                        >;
                };
        };
};
