/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

# include <behaviors.dtsi>
# include <dt-bindings/zmk/keys.h>
# include <dt-bindings/zmk/bt.h>

{
    behaviors {
        croc: croc {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LT>, <&kp GT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            }
        slash: slash {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            }
        comsqt: comma_apostrophe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SQT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            }
        dotqt: dot_quotation {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp DQT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;

        lines: underscore_pipe {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp UNDER>, <&kp PIPE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            }
        brace: brace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LBRC>, <&kp RBRC>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            }
        square: square_braket {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp RBKT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            }
        brackets: brackets {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp RPAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            }
        plusmin: plus_minus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PLUS>, <&kp MINUS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            }
        prcntastk: percent_asterisk {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PRCNT>, <&kp ASTRK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            }
         equalhat: equals_caret {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp EQUAL>, <&kp CARET>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            }

        };
    };
};


/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | N/A | ,(')| .(")|  P  |  Y  |  F  |      |  G  |  C  |  R  |  L  | DEL | N/A |
// | N/A |  A  |  O  |  E  |  U  |  I  |      |  D  |  H  |  T  |  N  |  S  | N/A |
// | N/A | SHFT|  Q  |  J  |  K  |  X  |      |  B  |  M  |  W  |  V  |  Z  | N/A |
//                    | CTRL | LWR | SPC |  | BKSP | RSE  | ENT |
                        bindings = <
   &kp A &comsqt &dotqt &kp P &kp Y &kp F   &kp G &kp C  &kp R &kp L &kp DEL &kp A
   &kp A &kp A &kp O &kp E &kp U &kp I   &kp D &kp H  &kp T &kp N &kp S &kp A
   &kp A &kp LSHFT &kp Q &kp J &kp K &kp X   &kp B &kp M  &kp W &kp V &kp Z &kp A
                  &kp LCTRL &mo 1 &kp SPACE   &kp BSPC &mo 2 &kp RET
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// | N/A | TAB |  #  |  &  |  ~  |  @  |      |  1  |  2  |  3  | +(-)| £($)| N/A |
// | N/A | ESC |  ;  |  :  |  !  |  ?  |      |  4  |  5  |  6  | %(*)| <(>)| N/A |
// | N/A | SHFT| _(|)| {(})| [(])| (())|      |  7  |  8  |  9  | =(^)| /(\)| N/A |
//                    | CTRL | DEF | SPC |  | BKSP | RSE  | 0 |
                        bindings = <
   &kp A &kp TAB &kp HASH &kp AMPS &kp TILDE &kp AT       &kp N1 &kp N2 &kp N3 &plusmin &kp A &kp A
   &kp A &kp ESC &kp SEMI &kp COLON &kp EXCL &kp QMARK    &kp N4 &kp N5 &kp N6 &prcntastk &croc &kp A
   &kp A &kp LSHFT &lines &brace &square &brackets        &kp N7 &kp N8 &kp N9 &equalhat &slash &kp A
                            &kp LCTRL &mo 1 &kp SPACE   &kp BSPC &mo 2 &kp N0
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// | N/A |     |     |  ⬆  |     |     |      |  V+ |  V- |  Vx |  B+ |  B- | N/A |
// | N/A |     |  ⬅ |  ⬇  |  ⮕ |     |      |  S⬆ |  S⬇ | FIND| PSCN|     | N/A |
// | N/A |     |     |     |     |     |      |     |     |     |     |     | N/A |
//                    | CTRL | LWR | SPC |  | BKSP | DEF | ENT |
                        bindings = <
   &kp A &kp A &kp A &kp UP &kp A &kp A            &kp K_VOL_UP &kp K_VOL_DN &kp K_MUTE &kp C_BRI_UP &kp C_BRI_DN &kp A
   &kp A &kp A &kp LEFT &kp DOWN &kp RIGHT &kp A   &kp K_SCROLL_UP &kp K_SCROLL_DOWN A &kp K_FIND &kp PSCN &kp A &kp A
   &kp A &kp A &kp A &kp A &kp A &kp A                &kp N7 &kp N8 &kp N9 &kp EQUAL &kp LT &kp A
          &kp LCTRL &mo 1 &kp SPACE   &kp BSPC &mo 2 &kp RET
                        >;
                };
        };
};
